// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: profiles.sql

package database

import (
	"context"
	"database/sql"
)

const countProfiles = `-- name: CountProfiles :one
SELECT count(*)
FROM profiles
`

func (q *Queries) CountProfiles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countProfiles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (baby_name, baby_birthday)
VALUES (?, ?)
RETURNING id, created_at, updated_at, baby_name, baby_birthday, diaper_interval_minutes
`

type CreateProfileParams struct {
	BabyName     string
	BabyBirthday string
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile, arg.BabyName, arg.BabyBirthday)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BabyName,
		&i.BabyBirthday,
		&i.DiaperIntervalMinutes,
	)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT id, created_at, updated_at, baby_name, baby_birthday, diaper_interval_minutes
FROM profiles
LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BabyName,
		&i.BabyBirthday,
		&i.DiaperIntervalMinutes,
	)
	return i, err
}

const resetCustomReminder = `-- name: ResetCustomReminder :one
UPDATE profiles
SET diaper_interval_minutes = NULL
RETURNING id, created_at, updated_at, baby_name, baby_birthday, diaper_interval_minutes
`

func (q *Queries) ResetCustomReminder(ctx context.Context) (Profile, error) {
	row := q.db.QueryRowContext(ctx, resetCustomReminder)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BabyName,
		&i.BabyBirthday,
		&i.DiaperIntervalMinutes,
	)
	return i, err
}

const setCustomReminder = `-- name: SetCustomReminder :one
UPDATE profiles
SET diaper_interval_minutes = ?
RETURNING id, created_at, updated_at, baby_name, baby_birthday, diaper_interval_minutes
`

func (q *Queries) SetCustomReminder(ctx context.Context, diaperIntervalMinutes sql.NullInt64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, setCustomReminder, diaperIntervalMinutes)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BabyName,
		&i.BabyBirthday,
		&i.DiaperIntervalMinutes,
	)
	return i, err
}
