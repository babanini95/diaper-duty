// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: changes.sql

package database

import (
	"context"
	"database/sql"
)

const getTheLastChange = `-- name: GetTheLastChange :one
SELECT id, created_at, updated_at, change_time, notes
FROM changes
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetTheLastChange(ctx context.Context) (Change, error) {
	row := q.db.QueryRowContext(ctx, getTheLastChange)
	var i Change
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChangeTime,
		&i.Notes,
	)
	return i, err
}

const insertDiaperChange = `-- name: InsertDiaperChange :one
INSERT INTO changes (change_time, notes)
VALUES (?, ?)
RETURNING id, created_at, updated_at, change_time, notes
`

type InsertDiaperChangeParams struct {
	ChangeTime string
	Notes      sql.NullString
}

func (q *Queries) InsertDiaperChange(ctx context.Context, arg InsertDiaperChangeParams) (Change, error) {
	row := q.db.QueryRowContext(ctx, insertDiaperChange, arg.ChangeTime, arg.Notes)
	var i Change
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChangeTime,
		&i.Notes,
	)
	return i, err
}
